// WinMsgLoop.cpp : 定义应用程序的入口点。
//

#include "stdafx.h"
#include "WinMsgLoop.h"

#include <functional>

#define MAX_LOADSTRING 100

// 全局变量:
HINSTANCE hInst;								// 当前实例
TCHAR szTitle[MAX_LOADSTRING];					// 标题栏文本
TCHAR szWindowClass[MAX_LOADSTRING];			// 主窗口类名
HANDLE g_Sig1 = NULL;
HANDLE g_Sig2 = NULL;
// 此代码模块中包含的函数的前向声明:
ATOM				MyRegisterClass( HINSTANCE hInstance );
BOOL				InitInstance( HINSTANCE,int );
LRESULT CALLBACK	WndProc( HWND,UINT,WPARAM,LPARAM );
INT_PTR CALLBACK	About( HWND,UINT,WPARAM,LPARAM );
void                SigTest1( HANDLE hSig );
void                SigTest2( HANDLE hSig );

int APIENTRY _tWinMain( HINSTANCE hInstance,HINSTANCE hPrevInstance,LPTSTR lpCmdLine,int nCmdShow )
{
	UNREFERENCED_PARAMETER( hPrevInstance );
	UNREFERENCED_PARAMETER( lpCmdLine );

    HANDLE hCompletionPort = CreateIoCompletionPort( INVALID_HANDLE_VALUE,NULL,0,0 );

 	// TODO: 在此放置代码。
	HACCEL hAccelTable;
    WinMsgLoop GuiMsgLoop;
    g_Sig1 = CreateEvent( 0,TRUE,FALSE,nullptr );
    g_Sig2 = CreateEvent( 0,TRUE,FALSE,nullptr );

    GuiMsgLoop.AddHandle( g_Sig1,std::bind( SigTest1,std::placeholders::_1 ) );
    GuiMsgLoop.AddHandle( g_Sig2,std::bind( SigTest2,std::placeholders::_1 ) );


	// 初始化全局字符串
	LoadString( hInstance,IDS_APP_TITLE,szTitle,MAX_LOADSTRING );
	LoadString( hInstance,IDC_WINMSGLOOP,szWindowClass,MAX_LOADSTRING );
	MyRegisterClass( hInstance );

	// 执行应用程序初始化:
	if (!InitInstance (hInstance, nCmdShow))
	{
		return FALSE;
	}

	hAccelTable = LoadAccelerators( hInstance,MAKEINTRESOURCE(IDC_WINMSGLOOP) );

	// 主消息循环:
	const int iRetCode=GuiMsgLoop.RunMsgLoop( hAccelTable );

    CloseHandle( g_Sig1 );
    CloseHandle( g_Sig2 );
	return iRetCode;
}



//
//  函数: MyRegisterClass()
//
//  目的: 注册窗口类。
//
//  注释:
//
//    仅当希望
//    此代码与添加到 Windows 95 中的“RegisterClassEx”
//    函数之前的 Win32 系统兼容时，才需要此函数及其用法。调用此函数十分重要，
//    这样应用程序就可以获得关联的
//    “格式正确的”小图标。
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
	WNDCLASSEX wcex;

	wcex.cbSize = sizeof(WNDCLASSEX);

	wcex.style			= CS_HREDRAW | CS_VREDRAW;
	wcex.lpfnWndProc	= WndProc;
	wcex.cbClsExtra		= 0;
	wcex.cbWndExtra		= 0;
	wcex.hInstance		= hInstance;
	wcex.hIcon			= LoadIcon( hInstance,MAKEINTRESOURCE(IDI_WINMSGLOOP) );
	wcex.hCursor		= LoadCursor( NULL,IDC_ARROW );
	wcex.hbrBackground	= (HBRUSH)(COLOR_WINDOW+1);
	wcex.lpszMenuName	= MAKEINTRESOURCE( IDC_WINMSGLOOP );
	wcex.lpszClassName	= szWindowClass;
	wcex.hIconSm		= LoadIcon( wcex.hInstance,MAKEINTRESOURCE(IDI_SMALL) );

	return RegisterClassEx( &wcex );
}

//
//   函数: InitInstance(HINSTANCE, int)
//
//   目的: 保存实例句柄并创建主窗口
//
//   注释:
//
//        在此函数中，我们在全局变量中保存实例句柄并
//        创建和显示主程序窗口。
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   HWND hWnd;

   hInst = hInstance; // 将实例句柄存储在全局变量中

   hWnd = CreateWindow( szWindowClass,szTitle,WS_OVERLAPPEDWINDOW,CW_USEDEFAULT,0,CW_USEDEFAULT,0,NULL,NULL,hInstance,NULL );

   if ( !hWnd )
   {
      return FALSE;
   }

   ShowWindow( hWnd,nCmdShow );
   UpdateWindow( hWnd );

   return TRUE;
}

//
//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  目的: 处理主窗口的消息。
//
//  WM_COMMAND	- 处理应用程序菜单
//  WM_PAINT	- 绘制主窗口
//  WM_DESTROY	- 发送退出消息并返回
//
//
LRESULT CALLBACK WndProc( HWND hWnd,UINT message,WPARAM wParam,LPARAM lParam )
{
	int wmId(0), wmEvent(0);
    PAINTSTRUCT ps = {0};
	HDC hdc        = NULL;

	switch( message )
	{
	case WM_COMMAND:
		wmId    = LOWORD( wParam );
		wmEvent = HIWORD( wParam );
		// 分析菜单选择:
		switch( wmId )
		{
		case IDM_ABOUT:
			DialogBox( hInst,MAKEINTRESOURCE(IDD_ABOUTBOX),hWnd,About );
			break;
		case IDM_EXIT:
			DestroyWindow( hWnd );
            break;
        case ID_SIGNAL_1:
            SetEvent( g_Sig1 );
			break;
        case ID_SIGNAL_2:
            SetEvent( g_Sig2 );
            break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		break;
	case WM_PAINT:
		hdc = BeginPaint( hWnd,&ps );
		// TODO: 在此添加任意绘图代码...
		EndPaint( hWnd,&ps );
		break;
	case WM_DESTROY:
		PostQuitMessage( 0 );
		break;
	default:
		return DefWindowProc( hWnd,message,wParam,lParam );
	}
	return 0;
}

// “关于”框的消息处理程序。
INT_PTR CALLBACK About( HWND hDlg,UINT message,WPARAM wParam,LPARAM lParam )
{
	UNREFERENCED_PARAMETER( lParam );
	switch( message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;
	case WM_COMMAND:
		if ( LOWORD(wParam)==IDOK || 
             LOWORD(wParam)==IDCANCEL )
		{
			EndDialog( hDlg,LOWORD(wParam) );
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}


void SigTest1( HANDLE hSig )
{
    MessageBox( NULL,_T("触发到信号1"),L"信号提示",MB_OK );
    ResetEvent( hSig );
}

void SigTest2( HANDLE hSig )
{
    MessageBox( NULL,_T("触发到信号2"),L"信号提示",MB_OK );
    ResetEvent( hSig );
}